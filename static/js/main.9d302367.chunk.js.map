{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","FINISH_NODE_ROW","FINISH_NODE_COL","SetEndNode","PathfindingVisualizer","switchCheck","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewEndPosotion","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","window","location","reload","onClick","visualizeDijkstra","refreshPage","type","name","value","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d302367.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component\n{ \n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isWall\n                    ? 'node-wall'\n                    : '';\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            ></div>\n        );\n    }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode)\n{\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes)\n{\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid)\n{\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors)\n    {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid)\n{\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid)\n{\n  const nodes = [];\n    for (const row of grid)\n    {\n        for (const node of row)\n        {\n            nodes.push(node);\n        }\n    }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode)\n{\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null)\n    {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport './PathfindingVisualizer.css';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\n\nconst START_NODE_ROW = 5;\nconst START_NODE_COL = 15;\nvar FINISH_NODE_ROW = 5;\nvar FINISH_NODE_COL = 35;\nvar SetEndNode = false;\n\nexport default class PathfindingVisualizer extends Component {\n\n  constructor() {\n    super();\n      this.state ={\n        grid: [],\n        mouseIsPressed: false,\n       };\n  }\n\n  componentDidMount()\n  {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n      var newGrid = this.state.grid;\n      if (SetEndNode) {\n            newGrid = getNewEndPosotion(row, col);\r\n        }\n        else {\n            newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        }\n        this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n        var newGrid = this.state.grid;\n        if (!this.state.mouseIsPressed) return;\n        if (SetEndNode) {\n            newGrid = getNewEndPosotion(row, col);\r\n        }\n        else {\n            newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        }\n\n        this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n      this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                this.animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * i);\n            return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-visited';\n        }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  refreshPage()\r\n    {\r\n      window.location.reload(false);\r\n    }\n\n  switchCheck = () => {\n        SetEndNode = !SetEndNode;\n    };\n\n  render() {\n        const { grid, mouseIsPressed } = this.state;\n        return (\n            <>\n                <button onClick={() => this.visualizeDijkstra()}>\n                    Visualize Dijkstra's Algorithm\n                </button>\n                <button onClick={() => this.refreshPage()}>\n                    Click to Reset the Chart\n                </button>\n                <br/>\n                <input type=\"checkbox\" onClick={() => this.switchCheck()}\n                    id=\"setEndNode\" name=\"setEndNode\" value=\"setEndNode\" /> move end node\n                <h3> click and drag to add walls </h3>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) =>this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}\n                                        ></Node>\n                                        );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n\nconst getNewEndPosotion = (row, col) =>\n{\n    FINISH_NODE_ROW = row;\n    FINISH_NODE_COL = col;\n    const newGrid = getInitialGrid();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isFinish: true,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}